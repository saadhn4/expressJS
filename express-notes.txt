Express JS - A framework of Node JS used to build Web Apps and APIs

Express is a popular Node JS Web App framework which provides features such as:

1. fast server side development
2. middlewares
3. routing
4. template engine
5. debugging
6. performance
7. web apps

Express JS makes it easy to handle HTTP requests and responses; allowing devs to create scalable and robust Web Apps

There are several alternatives for Express frameworks ; which are on top of Node JS 
Several popular options such as :

1. Express.js
2. KOA.js
3. HAPI.js
4. Nest.js 
5. Fastify.js

The latest version of Express is 4.21.1

How to set up Express:

1. Make sure you have node.js and npm installed ; also make sure both versions are LTS
LTS version of Node js - v22.12.0 ; Current version - v23.3.0

2. Create a repoistory of your project

3. clone it

4. cd repoName

5. mkdir server && cd server

6. npm init -y 

7. add "type":"module" 

7.5!!! in package.json file we replaced the test with "start":"nodemon app.js"
now to execute app.js using nodemon; we simply do npm star

8. touch app.js , .gitignore

9. add node_modules in .gitignore

10. install express (npm i express)

-------------------------------------------------------------------------------------------------------------------------

//Setting up a simple express web server

1. import express from 'express'

2. declare a variable const app = express()
//to use express, we stored it in a variable

3. declare a variable PORT ; const PORT= 5000

4. Creating an app.get() which has 2 parameters ; routing and arrow function. Inside the arrow function we have 2 parameters also -> req and res. 

5. now inside the arrow function ; create a try catch block

6. in the try block, res.send("Content displayed on web page")

7. Then to actually display the content we use, app.listen() ; It has 2 parameters port number and arrow function. (Port number is stored in variable PORT)

8. in the arrow function, print "Server is up and running at ${PORT}"

-------------------------------------------------------------------------------------------------------------------------

//Nodemon

1. Nodemon is a npm package which automatically restarts if there are any changes in your express server; or the app 

2. To install nodemon, the command is npm i -g nodemon

3. nodemon app.js

4. You dont have to manually ctrl c ; node app again now , If you just reload the page it will make the changes

-------------------------------------------------------------------------------------------------------------------------

//Playing with scripts

1. Script tag is a shortcut to run the apps

in package.json file we replaced the test with "start":"nodemon app.js"
now to execute app.js using nodemon; we simply do npm start

2. For users, theyll clone your repostiory, cd repoName, npm i and npm start 

--------------------------------------------------------------------------------------------------------------------------

//Responses (important are json,status and download)

1. res.end()
2. res.json()
3. res.download()
4. res.status()
5. res.send()
6. res.redirect()

//res.end() :

res.end() is used to send a response if there is a 1 way communication

Server --------------------------------------------------------------------------------------------> Client

//res.send() :

res.send() is used to send a response if there is a 2 way communication

Server <--------------------------------------------------------------------------------------------> Client

//res.json() :

res.json() is a response method which sends JSON data to client

//res.download() :

res.download() is a response method which is used to download files from web server

//res.status() :

res.status() is a response method which is used to set the status codes.

//res.redirect()

res.redirect()  is a response method which redirects someone to a webpage

-------------------------------------------------------------------------------------------------------------------------

//Protocols VS Status Codes

Protocols are set of rules that govern data communication across networks.
They ensure data is transmitted accurately, securely and efficiently.

List of proctocols:

1. HTTP (Hypertext Transfer Protocol):

- Used for Web communication
- Operates on port 80 (HTTP) and 443 (HTTPS)
- Stateless and request-response module

2. HTTPS (HTTP Secure):

- Secure version of HTTP with SSL/TLS encryption
- Ensures data integrity, confidentiality and authentication

3. FTP (File Transfer Protocol)

- Ports: 21 (control), 20(data)

4. SMTP (Simple Mail Transfer Protocol)

- Port 25 (unencrypted), 587/465 (secure)

5. IMAP (Internet Message Access Protocol) & POP3 (Post Office Protocol)

- Ports: IMAP 143/993 (secure), POP3 110/995 (secure)

6. DNS (Domain Name System)

- Port: 53

7. DHCP (Dynamic Host Configuration Protocol)

- Ports: 67 (server) , 68 (client)

8. SSH (Secure Shell)

-Port: 22

9. TLS/SSL (Transport Layer Security/Secure Sockets Layer)

- Encrypts communication for secure Data transmission

//HTTP Status Code:

-HTTP status code indicate the response from a web server after receiving a client request.

-100: Continue
-101: Switching Protocols
-200: OK
-201: Created
-202: Accepted
-204: No content
-301: Moved Permanently
-302: Found
-304: Not Modified
-400: Bad request
-401: Unauthorized
-403: Forbidden
-404: Not Found
-405: Method Not Allowed
-429: Too Many Requests
-500: Internal Server Error
-501: Not Implemented
-502: Bad Gateway
-503: Service Unavailable
-504: Gateway Timeout

Disclaimer: In a single server or a simple app, You can only send one response at a time.

--------------------------------------------------------------------------------------------------------------------------

//Express request methods

1. req.body()
2. req.host()
3. req.hostname()
4. req.ip()
5. req.ips()
6. req.methods()
7. req.originalUrl()
8. req.params()
9. req.path()
10. req.query()

--------------------------------------------------------------------------------------------------------------------------

HTTP: Hypertext Transfer Protocol (port: 80)

It is designed to enable communication between client and server

Eg: Client is a browser, we requested google.com and google servers gave us their website

--------------------------Most important backend point ⬇️----------------------------------------------------------------

Every web app, mobile app or website has 4 operations.

Create, Update, Read and Delete.

-------------------------------------------------------------------------------------------------------------------------

HTTP Methods:

1. GET: GET method retreives all the data from the server

2. POST: Creating new data in the server comes under POST method

3. PUT: When you update the existing data, its called PUT

4. DELETE: When you delete the entire data (specific or whole)


Every application uses these 4 HTTP methods to make their back end perform well and to work.

Using these 4 methods, they perform change in UI elements

--------------------------------------------------------------------------------------------------------------------------

API (Application Programming Interface) :

Set of rules and proctocols that allow two software components to communicate with each other.

APIs are used to exchange data, perform tasks and interact with other software components

Examples of how APIs are used:

Weather app, Rideshare app, Mobile payment, Smart Fridge, Travel booking site.

Important point: All browsers only accept GET method. 
--------------------------------------------------------------------------------------------------------------------------

Postman:
Indian progom global software company that offers an API platform for developers to design, build, test and collab on APIs. 

It is a client side API testing tool.

//collection: It is your project

browsers and postman are your client
clients make a request to server
clients make a request to your server API
server gives response to the client.


These API responses are formatted in UI elements (html,css,react)
--------------------------------------------------------------------------------------------------------------------------

POST Method:

Post method is used to create data in server 

To accept data from client, we use app.use(express.json()) and req.body()

1. declare app.use(express.json()) after the port 

//example:
app.post("/register", (req, res) => {
  try {
    let userInput = req.body;
    res.status(200).json({ msg: "Succesfully Registered User." });
  } catch (error) {
    console.log(error);
  }
});

then go into postman
in your folder add new request 
go into body select raw and make sure its json
then add your data 
press send
it should me whatevers in res.json {its in the form res.status(200).json({"msg":"Registered"})}

--------------------------------------------------------------------------------------------------------------------------

Axios in npm: A beginner's guide:

Axios is a popular HTTP client for making requests in JS applications. It simplifies working with APIs by providing a clean interface for sending HTTP requests and handling responses.

It is a popular JS library that allows devs to make HTTP requests to servers or third party sources.

Its a promise based HTTP client that can run in both the browser and node.js

Axios is often used in web dev to:

1. consume and display data from an API
2. communicate with serverless functions
3. post, edit and delete from an API
4. fetch data from APIs
5. interact with servers

Why use Axios?

1. Ease of use: Simple API for making requests
2. Promise Based: Working with async/await
3. Cross platform: Works in browser and Node.js
4. Automatic data conversion: Converts JSON data automatically

To install Axios:
npm i axios

Browser - GET request
Postman and Axios - All HTTP methods (GET, POST, PUT, DELETE)

To access your profile API in GitHub the URL is:
api.github.com/users/username

!!!!!!!!!!!!!You can only send ONE response in an API.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

How to use Axios:
axios.js file 

//rate limit exceeded API in GitHub:
 let response = await axios.get(`https://api.github.com/users/${username}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

dotenv setup:

npm i dotenv
import dotenv from "dotenv"
create a .env file in your folder
inside .env file => API_KEY="{your_api_key}"
come back to your main file
dotenv.config
const token = process.env.API_KEY

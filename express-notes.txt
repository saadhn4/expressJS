Express JS - A framework of Node JS used to build Web Apps and APIs

Express is a popular Node JS Web App framework which provides features such as:

1. fast server side development
2. middlewares
3. routing
4. template engine
5. debugging
6. performance
7. web apps

Express JS makes it easy to handle HTTP requests and responses; allowing devs to create scalable and robust Web Apps

There are several alternatives for Express frameworks ; which are on top of Node JS 
Several popular options such as :

1. Express.js
2. KOA.js
3. HAPI.js
4. Nest.js 
5. Fastify.js

The latest version of Express is 4.21.1

How to set up Express:

1. Make sure you have node.js and npm installed ; also make sure both versions are LTS
LTS version of Node js - v22.12.0 ; Current version - v23.3.0

2. Create a repoistory of your project

3. clone it

4. cd repoName

5. mkdir server && cd server

6. npm init -y 

7. add "type":"module" 

8. touch app.js , .gitignore

9. add node_modules in .gitignore

10. install express (npm i express)

-------------------------------------------------------------------------------------------------------------------------

//Setting up a simple express web server

1. import express from 'express'

2. declare a variable const app = express()
//to use express, we stored it in a variable

3. declare a variable PORT ; const PORT= 5000

4. Creating an app.get() which has 2 parameters ; routing and arrow function. Inside the arrow function we have 2 parameters also -> req and res. 

5. now inside the arrow function ; create a try catch block

6. in the try block, res.send("Content displayed on web page")

7. Then to actually display the content we use, app.listen() ; It has 2 parameters port number and arrow function. (Port number is stored in variable PORT)

8. in the arrow function, print "Server is up and running at ${PORT}"

-------------------------------------------------------------------------------------------------------------------------

//Nodemon

1. Nodemon is a npm package which automatically restarts if there are any changes in your express server; or the app 

2. To install nodemon, the command is npm i -g nodemon

3. nodemon app.js

4. You dont have to manually ctrl c ; node app again now , If you just reload the page it will make the changes

-------------------------------------------------------------------------------------------------------------------------

//Playing with scripts

1. Script tag is a shortcut to run the apps

in package.json file we replaced the test with "start":"nodemon app.js"
now to execute app.js using nodemon; we simply do npm start

2. For users, theyll clone your repostiory, cd repoName, npm i and npm start 

--------------------------------------------------------------------------------------------------------------------------

//Responses (important are json,status and download)

1. res.end()
2. res.json()
3. res.download()
4. res.status()
5. res.send()
6. res.redirect()

//res.end() :

res.end() is used to send a response if there is a 1 way communication

Server --------------------------------------------------------------------------------------------> Client

//res.send() :

res.send() is used to send a response if there is a 2 way communication

Server <--------------------------------------------------------------------------------------------> Client

//res.json() :

res.json() is a response method which sends JSON data to client

//res.download() :

res.download() is a response method which is used to download files from web server

//res.status() :

res.status() is a response method which is used to set the status codes.

//res.redirect()

res.redirect()  is a response method which redirects someone to a webpage

-------------------------------------------------------------------------------------------------------------------------

//Protocols VS Status Codes

Protocols are set of rules that govern data communication across networks.
They ensure data is transmitted accurately, securely and efficiently.

List of proctocols:

1. HTTP (Hypertext Transfer Protocol):

- Used for Web communication
- Operates on port 80 (HTTP) and 443 (HTTPS)
- Stateless and request-response module

2. HTTPS (HTTP Secure):

- Secure version of HTTP with SSL/TLS encryption
- Ensures data integrity, confidentiality and authentication

3. FTP (File Transfer Protocol)

- Ports: 21 (control), 20(data)

4. SMTP (Simple Mail Transfer Protocol)

- Port 25 (unencrypted), 587/465 (secure)

5. IMAP (Internet Message Access Protocol) & POP3 (Post Office Protocol)

- Ports: IMAP 143/993 (secure), POP3 110/995 (secure)

6. DNS (Domain Name System)

- Port: 53

7. DHCP (Dynamic Host Configuration Protocol)

- Ports: 67 (server) , 68 (client)

8. SSH (Secure Shell)

-Port: 22

9. TLS/SSL (Transport Layer Security/Secure Sockets Layer)

- Encrypts communication for secure Data transmission

//HTTP Status Code:

-HTTP status code indicate the response from a web server after receiving a client request.

-100: Continue
-101: Switching Protocols
-200: OK
-201: Created
-202: Accepted
-204: No content
-301: Moved Permanently
-302: Found
-304: Not Modified
-400: Bad request
-401: Unauthorized
-403: Forbidden
-404: Not Found
-405: Method Not Allowed
-429: Too Many Requests
-500: Internal Server Error
-501: Not Implemented
-502: Bad Gateway
-503: Service Unavailable
-504: Gateway Timeout

Disclaimer: In a single server or a simple app, You can only send one response at a time.










